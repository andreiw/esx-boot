/*
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Useful macros to code in assembly with clarity
 * and convenience.
 */

/*
 * Helps enforce correct usage of macros and their parameters,
 * by catching invalid macro parameter values.
 *
 * What 'x' and 'y' are is pretty flexible, these can be
 * references to macro params, can be registers or even values.
 *
 * E.g.:
 * - macro_arg_is_not \level, 4, "level cannot be \level"
 * - macro_arg_is_not \reg, a0, "reg cannot be a0"
 * - macro_arg_is_not \a, \b, "a cannot be b"
 */
.macro macro_arg_is_not x, y, err
   .if typeof_\x == typeof_\y
      .error "\err"
   .endif
.endm

/*
 * Call a C function.
 *
 * Ensures the stack is 16 byte aligned.
 */
.macro cabi_call sym
   push s1
   push t0
   mv   s1, sp
   andi t0, sp, 8
   beq  t0, zero, m\@_0
   addi sp, sp, -8
m\@_0:
   call \sym
   mv   sp, s1
   pop  t0
   pop  s1
.endm

/*
 * The "Asm ABI".
 *
 * This is like the RV ABI, except:
 * - you can have more than 1 return value.
 * - name mangling encodes the number of args and rets for
 *   at least some eyeball/linker checks.
 * - No requirement to align stack.
 *
 * Calls returning <= 2 rets are fully compatible
 * with being called from C.
 */
.macro aabi_defun name, nargs, nrets
aabi_\name\()_\nargs\()_\nrets\():
   sd   ra, -8(sp)
   sd   s0, -16(sp)
   mv   s0, sp
   addi sp, sp, -16
.endm

.macro aabi_defun_global name, nargs, nrets
   .global aabi_\name\()_\nargs\()_\nrets\()
   aabi_defun name=\name, nargs=\nargs, nrets=\nrets
.endm

.macro aabi_retfun
   mv   sp, s0
   ld   s0, -16(sp)
   ld   ra, -8(sp)
   ret
.endm

.macro aabi_call name, nargs, nrets
   call aabi_\name\()_\nargs\()_\nrets
.endm

/*
 * Push \reg onto stack.
 */
.macro push reg
   addi sp, sp, -8
   sd   \reg, 0(sp)
.endm

/*
 * Pop stack into \reg.
 */
.macro pop reg=zero
   ld   \reg, 0(sp)
   addi sp, sp, 8
.endm

/*
 * Fatal error.
 */
.macro fatal str
   debug_string \str
   aabi_call name=panic, nargs=0, nrets=0
.endm

#ifdef DEBUG
/*
 * Define a NUL-terminated ASCII string for use with
 * debug macros below.
 */
.macro debug_asciz sym, str
 \sym:
    .asciz "\str"
.endm

/*
 * Print a \str.
 */
.macro debug_string str
   push a0
   la   a0, \str
   aabi_call name=sbi_putstring, nargs=1, nrets=0
   pop  a0
.endm

/*
 * Print a \str and a 64-bit hex value passed as an immediate.
 */
.macro debug_string_imm str, imm
   push a0
   la   a0, \str
   aabi_call name=sbi_putstring, nargs=1, nrets=0
   li   a0, \imm
   aabi_call sbi_puthex64, nargs=1, nrets=0
   pop  a0
.endm

/*
 * Print a \str and a 64-bit hex value stored in \reg.
 *
 * This is written weirdly to allow reg to be a0.
 */
.macro debug_string_reg str, reg
   push a0
   la   a0, \str
   aabi_call name=sbi_putstring, nargs=1, nrets=0
   pop  a0
   push a0
   mv   a0, \reg
   aabi_call sbi_puthex64, nargs=1, nrets=0
   pop  a0
.endm

/*
 * Print a \str and a 64-bit hex value at the address
 * specified by \reg.
 *
  * This is written weirdly to allow reg to be a0.
 */
.macro debug_string_dereg_val64 str, reg
   push a0
   la   a0, \str
   aabi_call name=sbi_putstring, nargs=1, nrets=0
   pop  a0
   push a0
   mv   a0, \reg
   ld   a0, 0(a0)
   aabi_call sbi_puthex64, nargs=1, nrets=0
   pop  a0
.endm

/*
 * Print a \str and a 64-bit hex address of \sym.
 */
.macro debug_string_sym str, sym
   push a0
   la   a0, \str
   aabi_call name=sbi_putstring, nargs=1, nrets=0
   la   a0, \sym
   aabi_call sbi_puthex64, nargs=1, nrets=0
   pop  a0
.endm

/*
 * Print a \str and a 64-bit hex value stored at \sym.
 */
.macro debug_string_sym_val64 str, sym
   push a0
   la   a0, \str
   aabi_call name=sbi_putstring, nargs=1, nrets=0
   la   a0, \sym
   ld   a0, 0(a0)
   aabi_call sbi_puthex64, nargs=1, nrets=0
   pop  a0
.endm
#else
/*
 * On non-debugging builds all of these do nothing.
 */

.macro debug_asciz sym, str
.endm

.macro debug_string str
.endm

.macro debug_string_reg str, reg
.endm

.macro debug_string_dereg_val64 str, reg
.endm

.macro debug_string_sym str, sym
.endm

.macro debug_string_sym_val64 str, sym
.endm
#endif